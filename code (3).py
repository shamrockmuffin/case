import plistlib
import struct
from datetime import datetime, timedelta
import io

bplist_data_string = b"bplist00\xdaX$versionY$archiverT$topX$objects\x88\x89_NSKeyedArchiver\xd3Troot\xd0\x08U$null\xd0\x07TtypeVrecordV$class\x8aOYbplist00\xdaX$versionY$archiverT$topX$objects\x88\x89_NSKeyedArchiver\xd3Troot\xd0\x08KLMQWXYZ^afmnqtuU$null\xd0\x1a!\"#$%&'()*+,-./0123456.7696;6=6?@6B.6@56FG669.[unreadCountZhandleTypeZcallStatus^isoCountryCode\\serviceRadarXdurationXuniqueId_callerIdAvailability_bytesOfDataUsed\\callCategory_verificationStatus]devicePhoneId_localParticipantUUID_mobileCountryCode_remoteParticipantHandlesXimageURLV$classTnameTdateZhasMessage^conversationIDXcallerIdXcallType_participantGroupUUIDTread^junkConfidence_callerIdLocation_timeToEstablish_disconnectedCause_junkIdentificationCategory_mobileNetworkCode_outgoingLocalParticipantUUIDYmediaType\x8a\x8b#\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f _$3DA5B7D0-9B09-427E-A9BD-6E101DFAC44D\\+12105415300\xd0\x08NOPWNS.time\xd0\x07#A\xd0\x04\xd0\x05\xd0\x06\xd0\x07\xd0\x08\xd0\x09\xd0\x0a\xd0\x0b\xd0\x0c\xd0\x0d\xd0\x0e\xd0\x0f\xd0\x10\xd0\x11\xd0\x12\xd0\x13\xd0\x14\xd0\x15\xd0\x16\xd0\x17\xd0\x18\xd0\x19\xd0\x1a\xd0\x1b\xd0\x1c\xd0\x1d\xd0\x1e\xd0\x1f(\xd0\x04\xd0\x05\xd0\x06\xd0\x07\xd0\x08\xd0\x09\xd0\x0a\xd0\x0b\xd0\x0c\xd0\x0d\xd0\x0e\xd0\x0f\xd0\x10\xd0\x11\xd0\x12\xd0\x13\xd0\x14\xd0\x15\xd0\x16\xd0\x17\xd0\x18\xd0\x19\xd0\x1a\xd0\x1b\xd0\x1c\xd0\x1d\xd0\x1e\xd0\x1f\xea\xeaRSTUZ$classnameX$classesVNSDate\xd2TVXNSObjectRus_com.apple.Telephony\xd0\x07#?\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xd0\x07\xd0\x08\xd0\x09\xd0\x0a\xd0\x0b\xd0\x0c\xd0\x0d\xd0\x0e\xd0\x0f\xd0\x10\xd0\x11\xd0\x12\xd0\x13\xd0\x14\xd0\x15\xd0\x16\xd0\x17\xd0\x18\xd0\x19\x1a\x1b\x1c\xd0\x1d\xd0\x1e\xd0\x1f[\\]\\NS.uuidbytesO\xd1\xd2V\x08\x08F\x9d\x9a\xf9}\x1e\x81\x93\xd0\x07.\xd0\x04\xd0\x05\xd0\x06\xd0\x07\xd0\x08\xd0\x09\xd0\x0a\xd0\x0b\xd0\x0c\xd0\x0d\xd0\x0e\xd0\x0f\xd0\x10\xd0\x11\xd0\x12\xd0\x13\xd0\x14\xd0\x15\xd0\x16\xd0\x17\xd0\x18\xd0\x19\xd0\x1a\xd0\x1b\xd0\x1c\xd0\x1d\xd0\x1e\xd0\x1f\xea\xeaRS_`VNSUUID\xd2_V\xd0\x04\xd0\x05\xd0\x06\xd0\x07\xd0\x08\xd0\x09\xd0\x0a\xd0\x0b\xd0\x0c\xd0\x0d\xd0\x0e\xd0\x0f\xd0\x10\xd0\x11\xd0\x12\xd0\x13\xd0\x14\xd0\x15\xd0\x16\xd0\x17\xd0\x18\xd0\x19\xd0\x1a\xd0\x1b\xd0\x1c\xd0\x1d\xd0\x1e\xd0\x1f\xbc\xd0\x04\xd0\x05\xd0\x06\xd0\x07\xd0\x08\xd0\x09\xd0\x0a\xd0\x0b\xd0\x0c\xd0\x0d\xd0\x0e\xd0\x0f\xd0\x10\xd0\x11\xd0\x12\xd0\x13\xd0\x14\xd0\x15\xd0\x16\xd0\x17\xd0\x18\xd0\x19\xd0\x1a\xd0\x1b\xd0\x1c\xd0\x1d\xd0\x1e\xd0\x1f\xceZNS.objects\x89d\x8e\x8f\x90\x91ghijB/l_normalizedValueUvalueTtype\xd3\xd4\xd5\\+12105415300\xd0\x08RSopXCHHandle\xd2oV\xd0\x04\xd0\x05\xd0\x06\xd0\x07\xd0\x08\xd0\x09\xd0\x0a\xd0\x0b\xd0\x0c\xd0\x0d\xd0\x0e\xd0\x0f\xd0\x10\xd0\x11\xd0\x12\xd0\x13\xd0\x14\xd0\x15\xd0\x16\xd0\x17\xd0\x18\xd0\x19\xd0\x1a\xd0\x1b\xd0\x1c\xd0\x1d\xd0\x1e\xd0\x1f\xafRSrsUNSSet\xd2rV\xd0\x04\xd0\x05\xd0\x06\xd0\x07\xd0\x08\xd0\x09\xd0\x0a\xd0\x0b\xd0\x0c\xd0\x0d\xd0\x0e\xd0\x0f\xd0\x10\xd0\x11\xd0\x12\xd0\x13\xd0\x14\xd0\x15\xd0\x16\xd0\x17\xd0\x18\xd0\x19\xd0\x1a\xd0\x1b\xd0\x1c\xd0\x1d\xd0\x1e\xd0\x1f\xb0RSvw\\CHRecentCall\xd2vV\\CHRecentCall$)27ILQShn\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xd0\x07,9N\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xd0\x07\xd0\x08\xd0\x09\xd0\x0a\xd0\x0b\xd0\x0c\xd0\x0d\xd0\x0e\xd0\x0f\xd0\x10\xd0\x11\xd0\x12\xd0\x13\xd0\x14\xd0\x15\xd0\x16\xd0\x17\xd0\x18\xd0\x19\xd0\x1a\xd0\x1b\xd0\x1c\xd0\x1d\xd0\x1e\xd0\x1f\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xd0\x07&8Li}\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xd0\x07\xd0\x08\xd0\x09\xd0\x0a\xd0\x0b\xd0\x0c\xd0\x0d\xd0\x0e\xd0\x0f\xd0\x10\xd0\x11\xd0\x12\xd0\x13\xd0\x14\xd0\x15\xd0\x16\xd0\x17\xd0\x18\xd0\x19\xd0\x1a\xd0\x1b\xd0\x1c\xd0\x1d\xd0\x1e\xd0\x1f\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xd0\x07\xd0\x08\xd0\x09\xd0\x0a\xd0\x0b\xd0\x0c\xd0\x0d\xd0\x0e\xd0\x0f\xd0\x10\xd0\x11\xd0\x12\xd0\x13\xd0\x14\xd0\x15\xd0\x16\xd0\x17\xd0\x18\xd0\x19\xd0\x1a\xd0\x1b\xd0\x1c\xd0\x1d\xd0\x1e\xd0\x1f\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xd0\x07&/16AJQT]`v\x7f\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xd0\x07\xd0\x08\xd0\x09\xd0\x0a\xd0\x0b\xd0\x0c\xd0\x0d\xd0\x0e\xd0\x0f\xd0\x10\xd0\x11\xd0\x12\xd0\x13\xd0\x14\xd0\x15\xd0\x16\xd0\x17\xd0\x18\xd0\x19\xd0\x1a\xd0\x1b\xd0\x1c\xd0\x1d\xd0\x1e\xd0\x1f\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xd0\x07#%*7:yG\x9dZ$classnameX$classes]CHTransaction\xd2]CHTransactionXNSObject$)27ILQSX^ejqxz|~\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xd0\x07\xd0\x08\xd0\x09\xd0\x0a\xd0\x0b\xd0\x0c\xd0\x0d\xd0\x0e\xd0\x0f\xd0\x10\xd0\x11\xd0\x12\xd0\x13\xd0\x14\xd0\x15\xd0\x16\xd0\x17\xd0\x18\xd0\x19\xd0\x1a\xd0\x1b\xd0\x1c\xd0\x1d\xd0\x1e\xd0\x1f\x94\x94"

def parse_call_transaction_log(bplist_data):
    """
    Parses binary plist data and extracts call transaction timestamps with categories.

    Args:
        bplist_data: Raw binary plist data.

    Returns:
        A dictionary containing categorized timestamps with datetime values, or None if parsing fails.
    """
    try:
        plist_object = plistlib.loads(bplist_data)
        timestamps = {}

        def extract_timestamps_recursive(data, current_timestamps):
            if isinstance(data, dict):
                for key, value in data.items():
                    if isinstance(key, bytes):
                        key_str = key.decode('utf-8', errors='ignore')  # Attempt to decode bytes key
                        if "WNS.time#" in key_str:
                            timestamp_category = ""
                            if key_str.startswith('L'):
                                timestamp_category = "LWNS.time (Initial Request)"
                            elif key_str.startswith('M'):
                                timestamp_category = "MNWNS.time (Call Start)"
                            elif key_str.startswith('N'):
                                timestamp_category = "NOWNS.time (Connection)"
                            elif key_str.startswith('O'):
                                timestamp_category = "OPWNS.time (Termination)"
                            elif key_str.startswith('P'):
                                timestamp_category = "PWNS.time (Post-Processing)"

                            if timestamp_category:
                                timestamp_bytes = value
                                if isinstance(timestamp_bytes, bytes) and len(timestamp_bytes) == 8:
                                    timestamp_value = struct.unpack('>d', timestamp_bytes)[0]
                                    base_date = datetime(2001, 1, 1)
                                    actual_time = base_date + timedelta(seconds=timestamp_value)
                                    current_timestamps[timestamp_category] = str(actual_time) # Store as string for JSON

                    if isinstance(value, (dict, list)):
                        extract_timestamps_recursive(value, current_timestamps) # Recursively process nested structures
            elif isinstance(data, list):
                for item in data:
                    extract_timestamps_recursive(item, current_timestamps) # Recursively process list items

        extract_timestamps_recursive(plist_object, timestamps)
        return timestamps

    except Exception as e:
        print(f"Error parsing plist data: {e}")
        return None

# Parse the bplist data
parsed_timestamps = parse_call_transaction_log(bplist_data_string)

# Print the extracted timestamps in JSON format
if parsed_timestamps:
    json_output = json.dumps(parsed_timestamps, indent=4)
    print(json_output)
else:
    print("Failed to parse and extract timestamps.")